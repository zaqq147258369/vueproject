Vuex是一个专为Vue.js应用开发的状态管理模式：
    采用集中式存储管理应用的所有组件状态，并以对应的规则保证状态以一种可预测的方式发生变化

状态管理：
    把多个组件共享的变量全部储存在一个对象中。
    然后把这个对象放在顶层的Vue实例中，让其他组件可以使用。
    那么，多个组件就可以共享这个对象中的所有变量属性。

Vuex是响应式。

管理状态？
    用户登录状态，用户名称，头像，地理位置等。
    商品收藏，购物车的物品等

单页面状态管理：


修改状态：


VUex有几个核心概念：
    State
    Getters
    Mutation
    Action
    Module

State：单一状态树，单一数据源。整个项目只有一个store

Getters：公共方法，定义函数，可以在组件中调用。在Getters中可以直接调用getters本身

Mutation：Vuex中的store状态的更新唯一方式就是：提交Mutation
    Mutation主要包括：
        事件类型（type），
        一个回调函数（handler），该回调函数的第一个参数就是state
    通过mutation更新：
        this.$store.commit('xxx');
    mutation的参数：
        第一个参数是state，之后是参数。
        组件中使用，commit（'xxx',参数）
        参数被称为mutation的载荷
    提交方式:
        commit:普通提交方式。
        对象提交：{type：’xxx‘，num，xxx}
    响应规则:
        1、store中必须已经初始化，当属性初始化之后，这些属性才会被加入到响应式的系统中，而响应式系统会监听属性的变化，当属性发生改变时，会通知所有界面中用到属性的地方，让界面进行刷新更改数据
           当新增了一个新的未初始化的属性，界面不会发生刷新，响应式不会触发。
           但是可以使用Vue的方法，如：Vue.set(state.info,'address','xxx'),如此就可以实现响应式
    类型常量：
    mutation中的方法必须是同步方法。不能进行异步操作。

Action：类似于Mutation，但是是用来替代Mutation进行异步操作的。

Module：模块，当store对象变得臃肿，vue为了解决，可以将store进行分割模块，每个模块都拥有自己的state，mutations，actions，getters

项目结构：


